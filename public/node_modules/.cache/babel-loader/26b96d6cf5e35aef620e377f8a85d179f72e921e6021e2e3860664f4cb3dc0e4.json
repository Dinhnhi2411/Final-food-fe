{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport apiService from \"../../app/apiService\";\nimport { REVIEWS_PER_PRODUCT } from \"../../app/config\";\nconst initialState = {\n  isLoading: false,\n  error: null,\n  reviewsByProduct: {},\n  totalReviewsByPoduct: {},\n  currentPageByProduct: [],\n  reviewsById: {}\n};\nconst slice = createSlice({\n  name: \"review\",\n  initialState,\n  reducers: {\n    startLoading(state) {\n      state.isLoading = true;\n    },\n    hasError(state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    createReviewSuccess(state, action) {\n      state.isLoading = false;\n      state.error = null;\n    },\n    getReviewsSuccess(state, action) {\n      state.isLoading = false;\n      state.error = \"\";\n      const {\n        productId,\n        review,\n        totalResults,\n        page\n      } = action.payload;\n      review.forEach(review => state.reviewsById[review._id] = review);\n      state.reviewsByProduct[productId] = review.map(review => review._id).reverse();\n      state.totalReviewsByPoduct[productId] = totalResults;\n      state.currentPageByProduct[productId] = page;\n    },\n    sendReviewReactionSuccess(state, action) {\n      state.isLoading = false;\n      state.error = null;\n      const {\n        reviewId,\n        reactions\n      } = action.payload;\n      state.reviewsById[reviewId].totalRatings = reactions.totalRatings;\n      state.reviewsById[reviewId].rateAverage = reactions.rateAverage;\n    },\n    deleteReviewSuccess(state, action) {\n      state.isLoading = false;\n      state.error = null;\n      const {\n        _id,\n        product\n      } = action.payload;\n      state.reviewsByProduct[product] = state.reviewsByProduct[product].filter(reviewId => reviewId !== action.payload._id);\n      delete state.reviewsById[_id];\n      state.totalReviewsByPoduct[product] -= 1;\n    },\n    editReviewSuccess(state, action) {\n      state.isLoading = false;\n      state.error = null;\n      const {\n        _id,\n        content\n      } = action.payload;\n      state.reviewsById[_id].content = content;\n    }\n  }\n});\nexport default slice.reducer;\nexport const createReview = _ref => {\n  let {\n    productId,\n    content,\n    userId\n  } = _ref;\n  return async dispatch => {\n    dispatch(slice.actions.startLoading());\n    try {\n      const response = await apiService.post(`/reviews/me/${productId}`, {\n        content,\n        userId\n      });\n      dispatch(slice.actions.createReviewSuccess(response.data));\n      dispatch(getReviews({\n        productId\n      }));\n    } catch (error) {\n      dispatch(slice.actions.hasError(error.message));\n      toast.error(error.message);\n    }\n  };\n};\nexport const getReviews = _ref2 => {\n  let {\n    productId,\n    page = 1,\n    limit = REVIEWS_PER_PRODUCT\n  } = _ref2;\n  return async dispatch => {\n    dispatch(slice.actions.startLoading());\n    try {\n      const params = {\n        page: page,\n        limit: limit\n      };\n      const response = await apiService.get(`/reviews/public/${productId}`, {\n        params\n      });\n      if (response) {\n        dispatch(slice.actions.getReviewsSuccess({\n          ...response.data,\n          productId,\n          page\n        }));\n      }\n    } catch (error) {\n      dispatch(slice.actions.hasError(error.message));\n    }\n  };\n};\nexport const sendReviewReaction = _ref3 => {\n  let {\n    reviewId,\n    rate,\n    userId\n  } = _ref3;\n  return async dispatch => {\n    dispatch(slice.actions.startLoading());\n    try {\n      const response = await apiService.post(`/reactions`, {\n        refPaths: \"Review\",\n        targetId: reviewId,\n        userId: userId,\n        rate\n      });\n      dispatch(slice.actions.sendReviewReactionSuccess({\n        reviewId,\n        reactions: response.data\n      }));\n    } catch (error) {\n      dispatch(slice.actions.hasError(error.message));\n      toast.error(error.message);\n    }\n  };\n};\nexport const deleteReview = reviewId => async dispatch => {\n  dispatch(slice.actions.startLoading());\n  try {\n    const response = await apiService.delete(`/reviews/me/${reviewId}`);\n    dispatch(slice.actions.deleteReviewSuccess(response.data));\n    toast.success(\"Delete successfully\");\n  } catch (error) {\n    dispatch(slice.actions.hasError(error.message));\n    toast.error(error.message);\n  }\n};\nexport const editReview = _ref4 => {\n  let {\n    reviewId,\n    content\n  } = _ref4;\n  return async dispatch => {\n    dispatch(slice.actions.startLoading());\n    try {\n      const response = await apiService.put(`/reviews/me${reviewId}`, {\n        content\n      });\n      dispatch(slice.actions.editReviewSuccess(response.data));\n      toast.success(\"Edit successfully\");\n    } catch (error) {\n      dispatch(slice.actions.hasError(error.message));\n      toast.error(error.message);\n    }\n  };\n};","map":{"version":3,"names":["createSlice","toast","apiService","REVIEWS_PER_PRODUCT","initialState","isLoading","error","reviewsByProduct","totalReviewsByPoduct","currentPageByProduct","reviewsById","slice","name","reducers","startLoading","state","hasError","action","payload","createReviewSuccess","getReviewsSuccess","productId","review","totalResults","page","forEach","_id","map","reverse","sendReviewReactionSuccess","reviewId","reactions","totalRatings","rateAverage","deleteReviewSuccess","product","filter","editReviewSuccess","content","reducer","createReview","userId","dispatch","actions","response","post","data","getReviews","message","limit","params","get","sendReviewReaction","rate","refPaths","targetId","deleteReview","delete","success","editReview","put"],"sources":["D:/Gitlab/dinhngocliennhi1999_frontend/src/features/review/reviewSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { toast } from \"react-toastify\";\r\nimport apiService from \"../../app/apiService\";\r\nimport { REVIEWS_PER_PRODUCT } from \"../../app/config\";\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  error: null,\r\n  reviewsByProduct: {},\r\n  totalReviewsByPoduct: {},\r\n  currentPageByProduct: [],\r\n  reviewsById: {},\r\n\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: \"review\",\r\n  initialState,\r\n  reducers: {\r\n    startLoading(state) {\r\n      state.isLoading = true;\r\n    },\r\n    hasError(state, action) {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    createReviewSuccess(state, action) {\r\n      state.isLoading = false;\r\n      state.error = null;\r\n    },\r\n    getReviewsSuccess(state, action) {\r\n      state.isLoading = false;\r\n      state.error = \"\";\r\n      const { productId, review, totalResults, page } = action.payload;\r\n      review.forEach((review) => (state.reviewsById[review._id] = review));\r\n      state.reviewsByProduct[productId] = review\r\n        .map((review) => review._id)\r\n        .reverse();\r\n      state.totalReviewsByPoduct[productId] = totalResults;\r\n      state.currentPageByProduct[productId] = page;\r\n    },\r\n  \r\n    sendReviewReactionSuccess(state, action) {\r\n      state.isLoading = false;\r\n      state.error = null;\r\n      const { reviewId, reactions } = action.payload;\r\n\r\n      state.reviewsById[reviewId].totalRatings = reactions.totalRatings;\r\n      state.reviewsById[reviewId].rateAverage = reactions.rateAverage;\r\n    },\r\n    deleteReviewSuccess(state, action) {\r\n      state.isLoading = false;\r\n      state.error = null;\r\n      const { _id, product } = action.payload;\r\n      state.reviewsByProduct[product] = state.reviewsByProduct[product].filter(\r\n        (reviewId) => reviewId !== action.payload._id\r\n      );\r\n      delete state.reviewsById[_id];\r\n      state.totalReviewsByPoduct[product] -= 1;\r\n    },\r\n    editReviewSuccess(state, action) {\r\n      state.isLoading = false;\r\n      state.error = null;\r\n      const { _id, content } = action.payload;\r\n      state.reviewsById[_id].content = content;\r\n    },\r\n  },\r\n});\r\nexport default slice.reducer;\r\n\r\nexport const createReview =\r\n  ({ productId, content, userId }) =>\r\n  async (dispatch) => {\r\n    dispatch(slice.actions.startLoading());\r\n    try {\r\n      const response = await apiService.post(`/reviews/me/${productId}`, {\r\n        content, userId\r\n       \r\n      });\r\n      dispatch(slice.actions.createReviewSuccess(response.data));\r\n      dispatch(getReviews({ productId }));\r\n    } catch (error) {\r\n      dispatch(slice.actions.hasError(error.message));\r\n      toast.error(error.message);\r\n    }\r\n  };\r\n\r\nexport const getReviews =\r\n  ({ productId, page = 1, limit = REVIEWS_PER_PRODUCT }) =>\r\n  async (dispatch) => {\r\n    dispatch(slice.actions.startLoading());\r\n    try {\r\n      const params = {\r\n        page: page,\r\n        limit: limit,\r\n      };\r\n      const response = await apiService.get(`/reviews/public/${productId}`, {\r\n        params,\r\n      });\r\n       if (response) {\r\n       dispatch(\r\n        slice.actions.getReviewsSuccess({\r\n          ...response.data,\r\n          productId,\r\n          page,\r\n        })\r\n      );\r\n\r\n    }\r\n    } catch (error) {\r\n      dispatch(slice.actions.hasError(error.message));\r\n    }\r\n  };\r\n\r\nexport const sendReviewReaction =\r\n  ({ reviewId, rate, userId }) =>\r\n  async (dispatch) => {\r\n    dispatch(slice.actions.startLoading());\r\n    try {\r\n      const response = await apiService.post(`/reactions`, {\r\n        refPaths: \"Review\",\r\n        targetId: reviewId,\r\n        userId: userId,\r\n        rate,\r\n      });\r\n      dispatch(\r\n        slice.actions.sendReviewReactionSuccess({\r\n          reviewId,\r\n          reactions: response.data,\r\n        })\r\n      );\r\n    } catch (error) {\r\n      dispatch(slice.actions.hasError(error.message));\r\n      toast.error(error.message);\r\n    }\r\n  };\r\n\r\nexport const deleteReview = (reviewId) => async (dispatch) => {\r\n  dispatch(slice.actions.startLoading());\r\n  try {\r\n    const response = await apiService.delete(`/reviews/me/${reviewId}`);\r\n    dispatch(slice.actions.deleteReviewSuccess(response.data));\r\n\r\n    toast.success(\"Delete successfully\");\r\n  } catch (error) {\r\n    dispatch(slice.actions.hasError(error.message));\r\n    toast.error(error.message);\r\n  }\r\n};\r\n\r\nexport const editReview =\r\n  ({ reviewId, content }) =>\r\n  async (dispatch) => {\r\n    dispatch(slice.actions.startLoading());\r\n    try {\r\n      const response = await apiService.put(`/reviews/me${reviewId}`, {\r\n        content,\r\n      });\r\n      dispatch(slice.actions.editReviewSuccess(response.data));\r\n\r\n      toast.success(\"Edit successfully\");\r\n    } catch (error) {\r\n      dispatch(slice.actions.hasError(error.message));\r\n      toast.error(error.message);\r\n    }\r\n  };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}