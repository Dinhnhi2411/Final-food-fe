{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport { ok as assert } from 'uvu/assert';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.quotationMark || code === codes.apostrophe || code === codes.leftParenthesis, 'expected `\"`, `\\'`, or `(`');\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    marker = code === codes.leftParenthesis ? codes.rightParenthesis : code;\n    return atFirstTitleBreak;\n  }\n\n  /** @type {State} */\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atTitleBreak(code);\n  }\n\n  /** @type {State} */\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return atFirstTitleBreak(marker);\n    }\n    if (code === codes.eof) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding);\n      effects.consume(code);\n      effects.exit(types.lineEnding);\n      return factorySpace(effects, atTitleBreak, types.linePrefix);\n    }\n    effects.enter(types.chunkString, {\n      contentType: constants.contentTypeString\n    });\n    return title(code);\n  }\n\n  /** @type {State} */\n  function title(code) {\n    if (code === marker || code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.chunkString);\n      return atTitleBreak(code);\n    }\n    effects.consume(code);\n    return code === codes.backslash ? titleEscape : title;\n  }\n\n  /** @type {State} */\n  function titleEscape(code) {\n    if (code === marker || code === codes.backslash) {\n      effects.consume(code);\n      return title;\n    }\n    return title(code);\n  }\n}","map":{"version":3,"names":["ok","assert","factorySpace","markdownLineEnding","codes","constants","types","factoryTitle","effects","nok","type","markerType","stringType","marker","start","code","quotationMark","apostrophe","leftParenthesis","enter","consume","exit","rightParenthesis","atFirstTitleBreak","atTitleBreak","eof","lineEnding","linePrefix","chunkString","contentType","contentTypeString","title","backslash","titleEscape"],"sources":["D:/Gitlab/dinhngocliennhi1999_frontend/node_modules/micromark-factory-title/dev/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(\n      code === codes.quotationMark ||\n        code === codes.apostrophe ||\n        code === codes.leftParenthesis,\n      'expected `\"`, `\\'`, or `(`'\n    )\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === codes.leftParenthesis ? codes.rightParenthesis : code\n    return atFirstTitleBreak\n  }\n\n  /** @type {State} */\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n\n  /** @type {State} */\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return factorySpace(effects, atTitleBreak, types.linePrefix)\n    }\n\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return title(code)\n  }\n\n  /** @type {State} */\n  function title(code) {\n    if (code === marker || code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.chunkString)\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === codes.backslash ? titleEscape : title\n  }\n\n  /** @type {State} */\n  function titleEscape(code) {\n    if (code === marker || code === codes.backslash) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}