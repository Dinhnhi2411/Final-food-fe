{"ast":null,"code":"// @ts-ignore\nimport isoParse from './util/isodate';\nimport { date as locale } from './locale';\nimport isAbsent from './util/isAbsent';\nimport Ref from './Reference';\nimport BaseSchema from './schema';\nlet invalidDate = new Date('');\nlet isDate = obj => Object.prototype.toString.call(obj) === '[object Date]';\nexport function create() {\n  return new DateSchema();\n}\nexport default class DateSchema extends BaseSchema {\n  constructor() {\n    super({\n      type: 'date'\n    });\n    this.withMutation(() => {\n      this.transform(function (value) {\n        if (this.isType(value)) return value;\n        value = isoParse(value); // 0 is a valid timestamp equivalent to 1970-01-01T00:00:00Z(unix epoch) or before.\n\n        return !isNaN(value) ? new Date(value) : invalidDate;\n      });\n    });\n  }\n  _typeCheck(v) {\n    return isDate(v) && !isNaN(v.getTime());\n  }\n  prepareParam(ref, name) {\n    let param;\n    if (!Ref.isRef(ref)) {\n      let cast = this.cast(ref);\n      if (!this._typeCheck(cast)) throw new TypeError(`\\`${name}\\` must be a Date or a value that can be \\`cast()\\` to a Date`);\n      param = cast;\n    } else {\n      param = ref;\n    }\n    return param;\n  }\n  min(min) {\n    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.min;\n    let limit = this.prepareParam(min, 'min');\n    return this.test({\n      message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        min\n      },\n      test(value) {\n        return isAbsent(value) || value >= this.resolve(limit);\n      }\n    });\n  }\n  max(max) {\n    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.max;\n    let limit = this.prepareParam(max, 'max');\n    return this.test({\n      message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        max\n      },\n      test(value) {\n        return isAbsent(value) || value <= this.resolve(limit);\n      }\n    });\n  }\n}\nDateSchema.INVALID_DATE = invalidDate;\ncreate.prototype = DateSchema.prototype;\ncreate.INVALID_DATE = invalidDate;","map":{"version":3,"names":["isoParse","date","locale","isAbsent","Ref","BaseSchema","invalidDate","Date","isDate","obj","Object","prototype","toString","call","create","DateSchema","constructor","type","withMutation","transform","value","isType","isNaN","_typeCheck","v","getTime","prepareParam","ref","name","param","isRef","cast","TypeError","min","message","limit","test","exclusive","params","resolve","max","INVALID_DATE"],"sources":["D:/Github/Final-food/node_modules/yup/es/date.js"],"sourcesContent":["// @ts-ignore\nimport isoParse from './util/isodate';\nimport { date as locale } from './locale';\nimport isAbsent from './util/isAbsent';\nimport Ref from './Reference';\nimport BaseSchema from './schema';\nlet invalidDate = new Date('');\n\nlet isDate = obj => Object.prototype.toString.call(obj) === '[object Date]';\n\nexport function create() {\n  return new DateSchema();\n}\nexport default class DateSchema extends BaseSchema {\n  constructor() {\n    super({\n      type: 'date'\n    });\n    this.withMutation(() => {\n      this.transform(function (value) {\n        if (this.isType(value)) return value;\n        value = isoParse(value); // 0 is a valid timestamp equivalent to 1970-01-01T00:00:00Z(unix epoch) or before.\n\n        return !isNaN(value) ? new Date(value) : invalidDate;\n      });\n    });\n  }\n\n  _typeCheck(v) {\n    return isDate(v) && !isNaN(v.getTime());\n  }\n\n  prepareParam(ref, name) {\n    let param;\n\n    if (!Ref.isRef(ref)) {\n      let cast = this.cast(ref);\n      if (!this._typeCheck(cast)) throw new TypeError(`\\`${name}\\` must be a Date or a value that can be \\`cast()\\` to a Date`);\n      param = cast;\n    } else {\n      param = ref;\n    }\n\n    return param;\n  }\n\n  min(min, message = locale.min) {\n    let limit = this.prepareParam(min, 'min');\n    return this.test({\n      message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        min\n      },\n\n      test(value) {\n        return isAbsent(value) || value >= this.resolve(limit);\n      }\n\n    });\n  }\n\n  max(max, message = locale.max) {\n    let limit = this.prepareParam(max, 'max');\n    return this.test({\n      message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        max\n      },\n\n      test(value) {\n        return isAbsent(value) || value <= this.resolve(limit);\n      }\n\n    });\n  }\n\n}\nDateSchema.INVALID_DATE = invalidDate;\ncreate.prototype = DateSchema.prototype;\ncreate.INVALID_DATE = invalidDate;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}