{"ast":null,"code":"import _slicedToArray from \"D:/Gitlab/dinhngocliennhi1999_frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nvar globalId = 0;\nfunction useGlobalId(idOverride) {\n  var _React$useState = React.useState(idOverride),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    defaultId = _React$useState2[0],\n    setDefaultId = _React$useState2[1];\n  var id = idOverride || defaultId;\n  React.useEffect(function () {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(\"mui-\".concat(globalId));\n    }\n  }, [defaultId]);\n  return id;\n}\n\n// eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\nvar maybeReactUseId = React['useId' + ''];\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\nexport default function useId(idOverride) {\n  if (maybeReactUseId !== undefined) {\n    var reactId = maybeReactUseId();\n    return idOverride != null ? idOverride : reactId;\n  }\n  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n  return useGlobalId(idOverride);\n}","map":{"version":3,"names":["React","globalId","useGlobalId","idOverride","useState","defaultId","setDefaultId","id","useEffect","maybeReactUseId","useId","undefined","reactId"],"sources":["D:/Gitlab/dinhngocliennhi1999_frontend/node_modules/@mui/utils/esm/useId.js"],"sourcesContent":["import * as React from 'react';\nlet globalId = 0;\nfunction useGlobalId(idOverride) {\n  const [defaultId, setDefaultId] = React.useState(idOverride);\n  const id = idOverride || defaultId;\n  React.useEffect(() => {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(`mui-${globalId}`);\n    }\n  }, [defaultId]);\n  return id;\n}\n\n// eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\nconst maybeReactUseId = React['useId' + ''];\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\nexport default function useId(idOverride) {\n  if (maybeReactUseId !== undefined) {\n    const reactId = maybeReactUseId();\n    return idOverride != null ? idOverride : reactId;\n  }\n  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n  return useGlobalId(idOverride);\n}"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,IAAIC,QAAQ,GAAG,CAAC;AAChB,SAASC,WAAW,CAACC,UAAU,EAAE;EAC/B,sBAAkCH,KAAK,CAACI,QAAQ,CAACD,UAAU,CAAC;IAAA;IAArDE,SAAS;IAAEC,YAAY;EAC9B,IAAMC,EAAE,GAAGJ,UAAU,IAAIE,SAAS;EAClCL,KAAK,CAACQ,SAAS,CAAC,YAAM;IACpB,IAAIH,SAAS,IAAI,IAAI,EAAE;MACrB;MACA;MACA;MACA;MACAJ,QAAQ,IAAI,CAAC;MACbK,YAAY,eAAQL,QAAQ,EAAG;IACjC;EACF,CAAC,EAAE,CAACI,SAAS,CAAC,CAAC;EACf,OAAOE,EAAE;AACX;;AAEA;AACA,IAAME,eAAe,GAAGT,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASU,KAAK,CAACP,UAAU,EAAE;EACxC,IAAIM,eAAe,KAAKE,SAAS,EAAE;IACjC,IAAMC,OAAO,GAAGH,eAAe,EAAE;IACjC,OAAON,UAAU,IAAI,IAAI,GAAGA,UAAU,GAAGS,OAAO;EAClD;EACA;EACA,OAAOV,WAAW,CAACC,UAAU,CAAC;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}