{"ast":null,"code":"/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nimport { u } from 'unist-builder';\nimport { all } from './traverse.js';\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @type {Handler}\n * @param {ImageReference|LinkReference} node\n * @returns {Content|Array<Content>}\n */\nexport function revert(h, node) {\n  const subtype = node.referenceType;\n  let suffix = ']';\n  if (subtype === 'collapsed') {\n    suffix += '[]';\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']';\n  }\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix);\n  }\n  const contents = all(h, node);\n  const head = contents[0];\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value;\n  } else {\n    contents.unshift(u('text', '['));\n  }\n  const tail = contents[contents.length - 1];\n  if (tail && tail.type === 'text') {\n    tail.value += suffix;\n  } else {\n    contents.push(u('text', suffix));\n  }\n  return contents;\n}","map":{"version":3,"names":["u","all","revert","h","node","subtype","referenceType","suffix","label","identifier","type","alt","contents","head","value","unshift","tail","length","push"],"sources":["D:/Gitlab/dinhngocliennhi1999_frontend/node_modules/mdast-util-to-hast/lib/revert.js"],"sourcesContent":["/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from './traverse.js'\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @type {Handler}\n * @param {ImageReference|LinkReference} node\n * @returns {Content|Array<Content>}\n */\nexport function revert(h, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix)\n  }\n\n  const contents = all(h, node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift(u('text', '['))\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push(u('text', suffix))\n  }\n\n  return contents\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,CAAC,QAAO,eAAe;AAC/B,SAAQC,GAAG,QAAO,eAAe;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAM,CAACC,CAAC,EAAEC,IAAI,EAAE;EAC9B,MAAMC,OAAO,GAAGD,IAAI,CAACE,aAAa;EAClC,IAAIC,MAAM,GAAG,GAAG;EAEhB,IAAIF,OAAO,KAAK,WAAW,EAAE;IAC3BE,MAAM,IAAI,IAAI;EAChB,CAAC,MAAM,IAAIF,OAAO,KAAK,MAAM,EAAE;IAC7BE,MAAM,IAAI,GAAG,IAAIH,IAAI,CAACI,KAAK,IAAIJ,IAAI,CAACK,UAAU,CAAC,GAAG,GAAG;EACvD;EAEA,IAAIL,IAAI,CAACM,IAAI,KAAK,gBAAgB,EAAE;IAClC,OAAOV,CAAC,CAAC,MAAM,EAAE,IAAI,GAAGI,IAAI,CAACO,GAAG,GAAGJ,MAAM,CAAC;EAC5C;EAEA,MAAMK,QAAQ,GAAGX,GAAG,CAACE,CAAC,EAAEC,IAAI,CAAC;EAC7B,MAAMS,IAAI,GAAGD,QAAQ,CAAC,CAAC,CAAC;EAExB,IAAIC,IAAI,IAAIA,IAAI,CAACH,IAAI,KAAK,MAAM,EAAE;IAChCG,IAAI,CAACC,KAAK,GAAG,GAAG,GAAGD,IAAI,CAACC,KAAK;EAC/B,CAAC,MAAM;IACLF,QAAQ,CAACG,OAAO,CAACf,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;EAClC;EAEA,MAAMgB,IAAI,GAAGJ,QAAQ,CAACA,QAAQ,CAACK,MAAM,GAAG,CAAC,CAAC;EAE1C,IAAID,IAAI,IAAIA,IAAI,CAACN,IAAI,KAAK,MAAM,EAAE;IAChCM,IAAI,CAACF,KAAK,IAAIP,MAAM;EACtB,CAAC,MAAM;IACLK,QAAQ,CAACM,IAAI,CAAClB,CAAC,CAAC,MAAM,EAAEO,MAAM,CAAC,CAAC;EAClC;EAEA,OAAOK,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}