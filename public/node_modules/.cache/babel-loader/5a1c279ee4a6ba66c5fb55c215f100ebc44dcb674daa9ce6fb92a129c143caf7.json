{"ast":null,"code":"import { validateFieldsNatively as e, toNestError as t } from \"@hookform/resolvers\";\nimport { appendErrors as r } from \"react-hook-form\";\nvar o = function (o, n, a) {\n  return void 0 === n && (n = {}), void 0 === a && (a = {}), function (s, i, c) {\n    try {\n      return Promise.resolve(function (t, r) {\n        try {\n          var u = (n.context && \"development\" === process.env.NODE_ENV && console.warn(\"You should not used the yup options context. Please, use the 'useForm' context object instead\"), Promise.resolve(o[\"sync\" === a.mode ? \"validateSync\" : \"validate\"](s, Object.assign({\n            abortEarly: !1\n          }, n, {\n            context: i\n          }))).then(function (t) {\n            return c.shouldUseNativeValidation && e({}, c), {\n              values: a.rawValues ? s : t,\n              errors: {}\n            };\n          }));\n        } catch (e) {\n          return r(e);\n        }\n        return u && u.then ? u.then(void 0, r) : u;\n      }(0, function (e) {\n        if (!e.inner) throw e;\n        return {\n          values: {},\n          errors: t((o = e, n = !c.shouldUseNativeValidation && \"all\" === c.criteriaMode, (o.inner || []).reduce(function (e, t) {\n            if (e[t.path] || (e[t.path] = {\n              message: t.message,\n              type: t.type\n            }), n) {\n              var o = e[t.path].types,\n                a = o && o[t.type];\n              e[t.path] = r(t.path, n, e, t.type, a ? [].concat(a, t.message) : t.message);\n            }\n            return e;\n          }, {})), c)\n        };\n        var o, n;\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n};\nexport { o as yupResolver };","map":{"version":3,"mappings":";;AASA,IA+BaA,IACX,UAACC,GAAQC,GAAoBC;EAAAA,kBAApBD,UAAgB,gBAAIC,UAAkB,eACxCC,GAAQC,GAASC;IAAAA;MAAAA;QAAAA;UAAAA,SAEhBJ,EAAcG,WAAoC,kBAAzBE,QAAQC,IAAIC,YAEvCC,QAAQC,KACN,kHAIiBV,EACM,WAAzBE,EAAgBS,OAAkB,iBAAiB,YAEnDR,GACAS,OAAOC,OAAO;YAAEC,aAAY;UAAA,GAASb,GAAe;YAAEG;UAAAA,oBAJlDW;YASN,OAFAV,EAAQW,6BAA6BC,EAAuB,IAAIZ,IAEzD;cACLF,QAAQD,EAAgBgB,YAAYf,IAASY;cAC7CI,QAAQ;YAAA;UAAA;QAAA;UAAA;QAAA;QAAA;MAAA,eAEHC;QACP,KAAKA,EAAEC,OACL,MAAMD;QAGR,OAAO;UACLjB,QAAQ;UACRgB,QAAQG,GA7DdC,IA+DUH,GA9DVI,KA+DWnB,EAAQW,6BACkB,UAAzBX,EAAQoB,eA9DZF,EAAMF,SAAS,IAAIK,OACzB,UAACC,GAAUJ;YAKT,IAJKI,EAASJ,EAAMK,UAClBD,EAASJ,EAAMK,QAAS;cAAEC,SAASN,EAAMM;cAASC,MAAMP,EAAMO;YAAAA,IAG5DN,GAA0B;cAC5B,IAAMO,IAAQJ,EAASJ,EAAMK,MAAOG;gBAC9BC,IAAWD,KAASA,EAAMR,EAAMO;cAEtCH,EAASJ,EAAMK,QAASK,EACtBV,EAAMK,MACNJ,GACAG,GACAJ,EAAMO,MACNE,IACK,GAAgBE,OAAOF,GAAsBT,EAAMM,WACpDN,EAAMM;YAAAA;YAId,OAAOF;UAAAA,GAET,MAyCMtB;QAAAA;QApEe,IACvBkB,GACAC;MAAAA;IAAAA,CA8BA;MAAA;IAAA;EAAA;AAAA;AAAA","names":["yupResolver","schema","schemaOptions","resolverOptions","values","context","options","process","env","NODE_ENV","console","warn","mode","Object","assign","abortEarly","result","shouldUseNativeValidation","validateFieldsNatively","rawValues","errors","e","inner","toNestError","error","validateAllFieldCriteria","criteriaMode","reduce","previous","path","message","type","types","messages","appendErrors","concat"],"sources":["D:\\Github\\Final-food\\node_modules\\@hookform\\resolvers\\yup\\src\\yup.ts"],"sourcesContent":["import * as Yup from 'yup';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: resolverOptions.rawValues ? values : result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}