{"ast":null,"code":"import { lowerCase } from \"lower-case\";\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nvar DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n// Remove all non-word characters.\nvar DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = options.splitRegexp,\n    splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a,\n    _b = options.stripRegexp,\n    stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b,\n    _c = options.transform,\n    transform = _c === void 0 ? lowerCase : _c,\n    _d = options.delimiter,\n    delimiter = _d === void 0 ? \" \" : _d;\n  var result = replace(replace(input, splitRegexp, \"$1\\0$2\"), stripRegexp, \"\\0\");\n  var start = 0;\n  var end = result.length;\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") start++;\n  while (result.charAt(end - 1) === \"\\0\") end--;\n  // Transform each token independently.\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input, re, value) {\n  if (re instanceof RegExp) return input.replace(re, value);\n  return re.reduce(function (input, re) {\n    return input.replace(re, value);\n  }, input);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AAStC;AACA,IAAMC,oBAAoB,GAAG,CAAC,oBAAoB,EAAE,sBAAsB,CAAC;AAE3E;AACA,IAAMC,oBAAoB,GAAG,cAAc;AAE3C;;;AAGA,OAAM,SAAUC,MAAM,CAACC,KAAa,EAAEC,OAAqB;EAArB;IAAAA,YAAqB;EAAA;EAEvD,SAIEA,OAAO,YAJyB;IAAlCC,WAAW,mBAAGL,oBAAoB;IAClCM,KAGEF,OAAO,YAHyB;IAAlCG,WAAW,mBAAGN,oBAAoB;IAClCO,KAEEJ,OAAO,UAFY;IAArBK,SAAS,mBAAGV,SAAS;IACrBW,KACEN,OAAO,UADM;IAAfO,SAAS,mBAAG,GAAG;EAGjB,IAAIC,MAAM,GAAGC,OAAO,CAClBA,OAAO,CAACV,KAAK,EAAEE,WAAW,EAAE,QAAQ,CAAC,EACrCE,WAAW,EACX,IAAI,CACL;EACD,IAAIO,KAAK,GAAG,CAAC;EACb,IAAIC,GAAG,GAAGH,MAAM,CAACI,MAAM;EAEvB;EACA,OAAOJ,MAAM,CAACK,MAAM,CAACH,KAAK,CAAC,KAAK,IAAI,EAAEA,KAAK,EAAE;EAC7C,OAAOF,MAAM,CAACK,MAAM,CAACF,GAAG,GAAG,CAAC,CAAC,KAAK,IAAI,EAAEA,GAAG,EAAE;EAE7C;EACA,OAAOH,MAAM,CAACM,KAAK,CAACJ,KAAK,EAAEC,GAAG,CAAC,CAACI,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAACX,SAAS,CAAC,CAACY,IAAI,CAACV,SAAS,CAAC;AAC5E;AAEA;;;AAGA,SAASE,OAAO,CAACV,KAAa,EAAEmB,EAAqB,EAAEC,KAAa;EAClE,IAAID,EAAE,YAAYE,MAAM,EAAE,OAAOrB,KAAK,CAACU,OAAO,CAACS,EAAE,EAAEC,KAAK,CAAC;EACzD,OAAOD,EAAE,CAACG,MAAM,CAAC,UAACtB,KAAK,EAAEmB,EAAE;IAAK,YAAK,CAACT,OAAO,CAACS,EAAE,EAAEC,KAAK,CAAC;EAAxB,CAAwB,EAAEpB,KAAK,CAAC;AAClE","names":["lowerCase","DEFAULT_SPLIT_REGEXP","DEFAULT_STRIP_REGEXP","noCase","input","options","splitRegexp","_b","stripRegexp","_c","transform","_d","delimiter","result","replace","start","end","length","charAt","slice","split","map","join","re","value","RegExp","reduce"],"sources":["D:\\Gitlab\\dinhngocliennhi1999_frontend\\node_modules\\no-case\\src\\index.ts"],"sourcesContent":["import { lowerCase } from \"lower-case\";\n\nexport interface Options {\n  splitRegexp?: RegExp | RegExp[];\n  stripRegexp?: RegExp | RegExp[];\n  delimiter?: string;\n  transform?: (part: string, index: number, parts: string[]) => string;\n}\n\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nconst DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n\n// Remove all non-word characters.\nconst DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input: string, options: Options = {}) {\n  const {\n    splitRegexp = DEFAULT_SPLIT_REGEXP,\n    stripRegexp = DEFAULT_STRIP_REGEXP,\n    transform = lowerCase,\n    delimiter = \" \",\n  } = options;\n\n  let result = replace(\n    replace(input, splitRegexp, \"$1\\0$2\"),\n    stripRegexp,\n    \"\\0\"\n  );\n  let start = 0;\n  let end = result.length;\n\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") start++;\n  while (result.charAt(end - 1) === \"\\0\") end--;\n\n  // Transform each token independently.\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input: string, re: RegExp | RegExp[], value: string) {\n  if (re instanceof RegExp) return input.replace(re, value);\n  return re.reduce((input, re) => input.replace(re, value), input);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}