{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport { ok as assert } from 'uvu/assert';\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/** @type {Tokenizer} */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`');\n    effects.enter(types.autolink);\n    effects.enter(types.autolinkMarker);\n    effects.consume(code);\n    effects.exit(types.autolinkMarker);\n    effects.enter(types.autolinkProtocol);\n    return open;\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    return asciiAtext(code) ? emailAtext(code) : nok(code);\n  }\n\n  /** @type {State} */\n  function schemeOrEmailAtext(code) {\n    return code === codes.plusSign || code === codes.dash || code === codes.dot || asciiAlphanumeric(code) ? schemeInsideOrEmailAtext(code) : emailAtext(code);\n  }\n\n  /** @type {State} */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === codes.colon) {\n      effects.consume(code);\n      return urlInside;\n    }\n    if ((code === codes.plusSign || code === codes.dash || code === codes.dot || asciiAlphanumeric(code)) && size++ < constants.autolinkSchemeSizeMax) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    return emailAtext(code);\n  }\n\n  /** @type {State} */\n  function urlInside(code) {\n    if (code === codes.greaterThan) {\n      effects.exit(types.autolinkProtocol);\n      return end(code);\n    }\n    if (code === codes.eof || code === codes.space || code === codes.lessThan || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /** @type {State} */\n  function emailAtext(code) {\n    if (code === codes.atSign) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /** @type {State} */\n  function emailLabel(code) {\n    if (code === codes.dot) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === codes.greaterThan) {\n      // Exit, then change the type.\n      effects.exit(types.autolinkProtocol).type = types.autolinkEmail;\n      return end(code);\n    }\n    return emailValue(code);\n  }\n\n  /** @type {State} */\n  function emailValue(code) {\n    if ((code === codes.dash || asciiAlphanumeric(code)) && size++ < constants.autolinkDomainSizeMax) {\n      effects.consume(code);\n      return code === codes.dash ? emailValue : emailLabel;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function end(code) {\n    assert(code === codes.greaterThan, 'expected `>`');\n    effects.enter(types.autolinkMarker);\n    effects.consume(code);\n    effects.exit(types.autolinkMarker);\n    effects.exit(types.autolink);\n    return ok;\n  }\n}","map":{"version":3,"names":["ok","assert","asciiAlpha","asciiAlphanumeric","asciiAtext","asciiControl","codes","constants","types","autolink","name","tokenize","tokenizeAutolink","effects","nok","size","start","code","lessThan","enter","autolinkMarker","consume","exit","autolinkProtocol","open","schemeOrEmailAtext","emailAtext","plusSign","dash","dot","schemeInsideOrEmailAtext","colon","urlInside","autolinkSchemeSizeMax","greaterThan","end","eof","space","atSign","emailAtSignOrDot","emailLabel","type","autolinkEmail","emailValue","autolinkDomainSizeMax"],"sources":["D:/Gitlab/dinhngocliennhi1999_frontend/node_modules/micromark-core-commonmark/dev/lib/autolink.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const autolink = {name: 'autolink', tokenize: tokenizeAutolink}\n\n/** @type {Tokenizer} */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`')\n    effects.enter(types.autolink)\n    effects.enter(types.autolinkMarker)\n    effects.consume(code)\n    effects.exit(types.autolinkMarker)\n    effects.enter(types.autolinkProtocol)\n    return open\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n\n  /** @type {State} */\n  function schemeOrEmailAtext(code) {\n    return code === codes.plusSign ||\n      code === codes.dash ||\n      code === codes.dot ||\n      asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n\n  /** @type {State} */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === codes.colon) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === codes.plusSign ||\n        code === codes.dash ||\n        code === codes.dot ||\n        asciiAlphanumeric(code)) &&\n      size++ < constants.autolinkSchemeSizeMax\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n\n  /** @type {State} */\n  function urlInside(code) {\n    if (code === codes.greaterThan) {\n      effects.exit(types.autolinkProtocol)\n      return end(code)\n    }\n\n    if (\n      code === codes.eof ||\n      code === codes.space ||\n      code === codes.lessThan ||\n      asciiControl(code)\n    ) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n\n  /** @type {State} */\n  function emailAtext(code) {\n    if (code === codes.atSign) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /** @type {State} */\n  function emailLabel(code) {\n    if (code === codes.dot) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === codes.greaterThan) {\n      // Exit, then change the type.\n      effects.exit(types.autolinkProtocol).type = types.autolinkEmail\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n\n  /** @type {State} */\n  function emailValue(code) {\n    if (\n      (code === codes.dash || asciiAlphanumeric(code)) &&\n      size++ < constants.autolinkDomainSizeMax\n    ) {\n      effects.consume(code)\n      return code === codes.dash ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function end(code) {\n    assert(code === codes.greaterThan, 'expected `>`')\n    effects.enter(types.autolinkMarker)\n    effects.consume(code)\n    effects.exit(types.autolinkMarker)\n    effects.exit(types.autolink)\n    return ok\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}