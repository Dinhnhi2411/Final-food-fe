{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport { splice } from 'micromark-util-chunked';\nconst hasOwnProperty = {}.hasOwnProperty;\n\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {};\n  let index = -1;\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index]);\n  }\n  return all;\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  let hook;\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;\n    const left = maybe || (all[hook] = {});\n    const right = extension[hook];\n    /** @type {string} */\n    let code;\n    for (code in right) {\n      if (!hasOwnProperty.call(left, code)) left[code] = [];\n      const value = right[code];\n      constructs(\n      // @ts-expect-error Looks like a list.\n      left[code], Array.isArray(value) ? value : value ? [value] : []);\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1;\n  /** @type {unknown[]} */\n  const before = [];\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;\n    (list[index].add === 'after' ? existing : before).push(list[index]);\n  }\n  splice(existing, 0, 0, before);\n}\n\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {};\n  let index = -1;\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index]);\n  }\n  return handlers;\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  let hook;\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;\n    const left = maybe || (all[hook] = {});\n    const right = extension[hook];\n    /** @type {string} */\n    let type;\n    if (right) {\n      for (type in right) {\n        left[type] = right[type];\n      }\n    }\n  }\n}","map":{"version":3,"names":["splice","hasOwnProperty","combineExtensions","extensions","all","index","length","syntaxExtension","extension","hook","maybe","call","undefined","left","right","code","value","constructs","Array","isArray","existing","list","before","add","push","combineHtmlExtensions","htmlExtensions","handlers","htmlExtension","type"],"sources":["D:/Gitlab/dinhngocliennhi1999_frontend/node_modules/micromark-util-combine-extensions/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    for (code in right) {\n      if (!hasOwnProperty.call(left, code)) left[code] = []\n      const value = right[code]\n      constructs(\n        // @ts-expect-error Looks like a list.\n        left[code],\n        Array.isArray(value) ? value : value ? [value] : []\n      )\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {unknown[]} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        left[type] = right[type]\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}