{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider(_ref) {\n    let {\n      children,\n      theme: themeProp = defaultTheme,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      attribute = defaultAttribute,\n      defaultMode = designSystemMode,\n      defaultColorScheme = designSystemColorScheme,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      colorSchemeSelector = ':root',\n      shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar\n    } = _ref;\n    const hasMounted = React.useRef(false);\n    const {\n        colorSchemes = {},\n        components = {},\n        cssVarPrefix\n      } = themeProp,\n      restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    const calculatedMode = (() => {\n      if (!mode) {\n        // This scope occurs on the server\n        if (defaultMode === 'system') {\n          return designSystemMode;\n        }\n        return defaultMode;\n      }\n      return mode;\n    })();\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'system'\n\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    })(); // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n\n    const {\n      css: rootCss,\n      vars: rootVars,\n      parsedTheme\n    } = cssVarsParser(restThemeProp, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar\n    }); // 3. Start composing the theme object\n\n    let theme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    }); // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(_ref2 => {\n      let [key, scheme] = _ref2;\n      const {\n        css,\n        vars,\n        parsedTheme: parsedScheme\n      } = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar\n      });\n      theme.vars = deepmerge(theme.vars, vars);\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        theme = _extends({}, theme, parsedScheme);\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      })();\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    }); // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      mode,\n      systemMode,\n      setMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme,\n      allColorSchemes\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          [colorSchemeSelector]: rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","GlobalStyles","cssVarsParser","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","designSystemMode","defaultColorScheme","designSystemColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","shouldSkipGeneratingVar","designSystemShouldSkipGeneratingVar","resolveTheme","excludeVariablesFromRoot","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","hasMounted","useRef","components","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","supportedColorSchemes","calculatedMode","calculatedColorScheme","css","rootCss","vars","rootVars","parsedTheme","prefix","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","key","scheme","parsedScheme","palette","resolvedDefaultColorScheme","excludedVariables","cssVar","useEffect","setAttribute","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","useMemo","Provider","styles","propTypes","string","node","any","oneOfType","object","bool","func","getInitColorSchemeScript","params"],"sources":["D:/Gitlab/dinhngocliennhi1999_frontend/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = defaultTheme,\n    modeStorageKey = defaultModeStorageKey,\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\n    attribute = defaultAttribute,\n    defaultMode = designSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    documentNode = typeof document === 'undefined' ? undefined : document,\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n    colorSchemeSelector = ':root',\n    shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar\n  }) {\n    const hasMounted = React.useRef(false);\n\n    const {\n      colorSchemes = {},\n      components = {},\n      cssVarPrefix\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n\n    const calculatedMode = (() => {\n      if (!mode) {\n        // This scope occurs on the server\n        if (defaultMode === 'system') {\n          return designSystemMode;\n        }\n\n        return defaultMode;\n      }\n\n      return mode;\n    })();\n\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'system'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })(); // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n\n\n    const {\n      css: rootCss,\n      vars: rootVars,\n      parsedTheme\n    } = cssVarsParser(restThemeProp, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar\n    }); // 3. Start composing the theme object\n\n    let theme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    }); // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n\n\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars,\n        parsedTheme: parsedScheme\n      } = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar\n      });\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        theme = _extends({}, theme, parsedScheme);\n\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    }); // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      mode,\n      systemMode,\n      setMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme,\n      allColorSchemes\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          [colorSchemeSelector]: rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,6BAA6B,MAAM,yDAAyD;AACnG,SAASC,qBAAqB,IAAIC,sBAAsB,QAAQ,YAAY;AAC5E,MAAMC,SAAS,GAAG,CAAC,cAAc,EAAE,YAAY,EAAE,cAAc,CAAC;AAChE,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,YAAY,QAAQ,oBAAoB;AACjD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,aAAa,MAAM,kBAAkB;AAC5C,OAAOC,8BAA8B,IAAIC,iBAAiB,EAAEC,gCAAgC,EAAEC,wBAAwB,QAAQ,4BAA4B;AAC1J,OAAOC,qBAAqB,MAAM,yBAAyB;AAC3D,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,IAAI,IAAIC,KAAK,QAAQ,mBAAmB;AACjD,OAAO,MAAMC,sBAAsB,GAAG,0JAA0J;AAChM,eAAe,SAASC,qBAAqB,CAACC,OAAO,EAAE;EACrD,MAAM;IACJC,KAAK,EAAEC,YAAY,GAAG,CAAC,CAAC;IACxBC,SAAS,EAAEC,gBAAgB,GAAGd,iBAAiB;IAC/Ce,cAAc,EAAEC,qBAAqB,GAAGd,wBAAwB;IAChEe,qBAAqB,EAAEC,4BAA4B,GAAGjB,gCAAgC;IACtFkB,WAAW,EAAEC,gBAAgB,GAAG,OAAO;IACvCC,kBAAkB,EAAEC,uBAAuB;IAC3CC,yBAAyB,EAAEC,8BAA8B,GAAG,KAAK;IACjEC,uBAAuB,EAAEC,mCAAmC;IAC5DC,YAAY;IACZC;EACF,CAAC,GAAGlB,OAAO;EAEX,IAAI,CAACE,YAAY,CAACiB,YAAY,IAAI,OAAOP,uBAAuB,KAAK,QAAQ,IAAI,CAACV,YAAY,CAACiB,YAAY,CAACP,uBAAuB,CAAC,IAAI,OAAOA,uBAAuB,KAAK,QAAQ,IAAI,CAACV,YAAY,CAACiB,YAAY,CAACP,uBAAuB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,uBAAuB,CAACQ,KAAK,CAAC,IAAI,OAAOR,uBAAuB,KAAK,QAAQ,IAAI,CAACV,YAAY,CAACiB,YAAY,CAACP,uBAAuB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,uBAAuB,CAACS,IAAI,CAAC,EAAE;IACjbC,OAAO,CAACC,KAAK,CAAE,UAASX,uBAAwB,8CAA6C,CAAC;EAChG;EAEA,MAAMY,kBAAkB,GAAG,aAAazC,KAAK,CAAC0C,aAAa,CAACC,SAAS,CAAC;EAEtE,MAAMC,cAAc,GAAG,MAAM;IAC3B,MAAMC,KAAK,GAAG7C,KAAK,CAAC8C,UAAU,CAACL,kBAAkB,CAAC;IAElD,IAAI,CAACI,KAAK,EAAE;MACV,MAAM,IAAIE,KAAK,CAACC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAI,kEAAiE,GAAGpD,sBAAsB,CAAC,EAAE,CAAC,CAAC;IAC1J;IAEA,OAAO+C,KAAK;EACd,CAAC;EAED,SAASM,eAAe,OAcrB;IAAA,IAdsB;MACvBC,QAAQ;MACRlC,KAAK,EAAEmC,SAAS,GAAGlC,YAAY;MAC/BG,cAAc,GAAGC,qBAAqB;MACtCC,qBAAqB,GAAGC,4BAA4B;MACpDL,SAAS,GAAGC,gBAAgB;MAC5BK,WAAW,GAAGC,gBAAgB;MAC9BC,kBAAkB,GAAGC,uBAAuB;MAC5CC,yBAAyB,GAAGC,8BAA8B;MAC1DuB,aAAa,GAAG,OAAOC,MAAM,KAAK,WAAW,GAAGZ,SAAS,GAAGY,MAAM;MAClEC,YAAY,GAAG,OAAOC,QAAQ,KAAK,WAAW,GAAGd,SAAS,GAAGc,QAAQ;MACrEC,eAAe,GAAG,OAAOD,QAAQ,KAAK,WAAW,GAAGd,SAAS,GAAGc,QAAQ,CAACE,eAAe;MACxFC,mBAAmB,GAAG,OAAO;MAC7B5B,uBAAuB,GAAGC;IAC5B,CAAC;IACC,MAAM4B,UAAU,GAAG7D,KAAK,CAAC8D,MAAM,CAAC,KAAK,CAAC;IAEtC,MAAM;QACJ1B,YAAY,GAAG,CAAC,CAAC;QACjB2B,UAAU,GAAG,CAAC,CAAC;QACfC;MACF,CAAC,GAAGX,SAAS;MACPY,aAAa,GAAGrE,6BAA6B,CAACyD,SAAS,EAAEtD,SAAS,CAAC;IAEzE,MAAMmE,eAAe,GAAGC,MAAM,CAACC,IAAI,CAAChC,YAAY,CAAC;IACjD,MAAMiC,uBAAuB,GAAG,OAAOzC,kBAAkB,KAAK,QAAQ,GAAGA,kBAAkB,GAAGA,kBAAkB,CAACS,KAAK;IACtH,MAAMiC,sBAAsB,GAAG,OAAO1C,kBAAkB,KAAK,QAAQ,GAAGA,kBAAkB,GAAGA,kBAAkB,CAACU,IAAI,CAAC,CAAC;;IAEtH,MAAM;MACJiC,IAAI;MACJC,OAAO;MACPC,UAAU;MACVC,gBAAgB;MAChBC,eAAe;MACfC,WAAW;MACXC;IACF,CAAC,GAAGnE,qBAAqB,CAAC;MACxBoE,qBAAqB,EAAEZ,eAAe;MACtCG,uBAAuB;MACvBC,sBAAsB;MACtBhD,cAAc;MACdE,qBAAqB;MACrBE,WAAW;MACX4B;IACF,CAAC,CAAC;IAEF,MAAMyB,cAAc,GAAG,CAAC,MAAM;MAC5B,IAAI,CAACR,IAAI,EAAE;QACT;QACA,IAAI7C,WAAW,KAAK,QAAQ,EAAE;UAC5B,OAAOC,gBAAgB;QACzB;QAEA,OAAOD,WAAW;MACpB;MAEA,OAAO6C,IAAI;IACb,CAAC,GAAG;IAEJ,MAAMS,qBAAqB,GAAG,CAAC,MAAM;MACnC,IAAI,CAACJ,WAAW,EAAE;QAChB;QACA,IAAIG,cAAc,KAAK,MAAM,EAAE;UAC7B,OAAOT,sBAAsB;QAC/B,CAAC,CAAC;;QAGF,OAAOD,uBAAuB;MAChC;MAEA,OAAOO,WAAW;IACpB,CAAC,GAAG,CAAC,CAAC;;IAGN,MAAM;MACJK,GAAG,EAAEC,OAAO;MACZC,IAAI,EAAEC,QAAQ;MACdC;IACF,CAAC,GAAGjF,aAAa,CAAC6D,aAAa,EAAE;MAC/BqB,MAAM,EAAEtB,YAAY;MACpBhC;IACF,CAAC,CAAC,CAAC,CAAC;;IAEJ,IAAId,KAAK,GAAGvB,QAAQ,CAAC,CAAC,CAAC,EAAE0F,WAAW,EAAE;MACpCtB,UAAU;MACV3B,YAAY;MACZ4B,YAAY;MACZmB,IAAI,EAAEC,QAAQ;MACdG,sBAAsB,EAAEC,iBAAiB,IAAK,IAAGpE,SAAU,KAAIoE,iBAAkB;IACnF,CAAC,CAAC,CAAC,CAAC;IACJ;IACA;;IAGA,MAAMC,4BAA4B,GAAG,CAAC,CAAC;IACvC,MAAMC,2BAA2B,GAAG,CAAC,CAAC;IACtCvB,MAAM,CAACwB,OAAO,CAACvD,YAAY,CAAC,CAACwD,OAAO,CAAC,SAAmB;MAAA,IAAlB,CAACC,GAAG,EAAEC,MAAM,CAAC;MACjD,MAAM;QACJb,GAAG;QACHE,IAAI;QACJE,WAAW,EAAEU;MACf,CAAC,GAAG3F,aAAa,CAAC0F,MAAM,EAAE;QACxBR,MAAM,EAAEtB,YAAY;QACpBhC;MACF,CAAC,CAAC;MACFd,KAAK,CAACiE,IAAI,GAAGjF,SAAS,CAACgB,KAAK,CAACiE,IAAI,EAAEA,IAAI,CAAC;MAExC,IAAIU,GAAG,KAAKb,qBAAqB,EAAE;QACjC;QACA9D,KAAK,GAAGvB,QAAQ,CAAC,CAAC,CAAC,EAAEuB,KAAK,EAAE6E,YAAY,CAAC;QAEzC,IAAI7E,KAAK,CAAC8E,OAAO,EAAE;UACjB9E,KAAK,CAAC8E,OAAO,CAACpB,WAAW,GAAGiB,GAAG;QACjC;MACF;MAEA,MAAMI,0BAA0B,GAAG,CAAC,MAAM;QACxC,IAAI,OAAOrE,kBAAkB,KAAK,QAAQ,EAAE;UAC1C,OAAOA,kBAAkB;QAC3B;QAEA,IAAIF,WAAW,KAAK,MAAM,EAAE;UAC1B,OAAOE,kBAAkB,CAACU,IAAI;QAChC;QAEA,OAAOV,kBAAkB,CAACS,KAAK;MACjC,CAAC,GAAG;MAEJ,IAAIwD,GAAG,KAAKI,0BAA0B,EAAE;QACtC,IAAI9D,wBAAwB,EAAE;UAC5B,MAAM+D,iBAAiB,GAAG,CAAC,CAAC;UAC5B/D,wBAAwB,CAAC6B,YAAY,CAAC,CAAC4B,OAAO,CAACO,MAAM,IAAI;YACvDD,iBAAiB,CAACC,MAAM,CAAC,GAAGlB,GAAG,CAACkB,MAAM,CAAC;YACvC,OAAOlB,GAAG,CAACkB,MAAM,CAAC;UACpB,CAAC,CAAC;UACFV,4BAA4B,CAAE,IAAGrE,SAAU,KAAIyE,GAAI,IAAG,CAAC,GAAGK,iBAAiB;QAC7E;QAEAT,4BAA4B,CAAE,GAAE7B,mBAAoB,MAAKxC,SAAU,KAAIyE,GAAI,IAAG,CAAC,GAAGZ,GAAG;MACvF,CAAC,MAAM;QACLS,2BAA2B,CAAE,GAAE9B,mBAAmB,KAAK,OAAO,GAAG,EAAE,GAAGA,mBAAoB,IAAGxC,SAAU,KAAIyE,GAAI,IAAG,CAAC,GAAGZ,GAAG;MAC3H;IACF,CAAC,CAAC,CAAC,CAAC;IACJ;;IAEAjF,KAAK,CAACoG,SAAS,CAAC,MAAM;MACpB,IAAIxB,WAAW,IAAIlB,eAAe,EAAE;QAClC;QACAA,eAAe,CAAC2C,YAAY,CAACjF,SAAS,EAAEwD,WAAW,CAAC;MACtD;IACF,CAAC,EAAE,CAACA,WAAW,EAAExD,SAAS,EAAEsC,eAAe,CAAC,CAAC,CAAC,CAAC;IAC/C;;IAEA1D,KAAK,CAACoG,SAAS,CAAC,MAAM;MACpB,IAAIE,KAAK;MAET,IAAIxE,yBAAyB,IAAI+B,UAAU,CAAC0C,OAAO,IAAI/C,YAAY,EAAE;QACnE,MAAMyB,GAAG,GAAGzB,YAAY,CAACgD,aAAa,CAAC,OAAO,CAAC;QAC/CvB,GAAG,CAACwB,WAAW,CAACjD,YAAY,CAACkD,cAAc,CAAC3F,sBAAsB,CAAC,CAAC;QACpEyC,YAAY,CAACmD,IAAI,CAACF,WAAW,CAACxB,GAAG,CAAC,CAAC,CAAC;;QAEpC,CAAC,MAAM1B,MAAM,CAACqD,gBAAgB,CAACpD,YAAY,CAACqD,IAAI,CAAC,GAAG;QAEpDP,KAAK,GAAGQ,UAAU,CAAC,MAAM;UACvBtD,YAAY,CAACmD,IAAI,CAACI,WAAW,CAAC9B,GAAG,CAAC;QACpC,CAAC,EAAE,CAAC,CAAC;MACP;MAEA,OAAO,MAAM;QACX+B,YAAY,CAACV,KAAK,CAAC;MACrB,CAAC;IACH,CAAC,EAAE,CAAC1B,WAAW,EAAE9C,yBAAyB,EAAE0B,YAAY,CAAC,CAAC;IAC1DxD,KAAK,CAACoG,SAAS,CAAC,MAAM;MACpBvC,UAAU,CAAC0C,OAAO,GAAG,IAAI;MACzB,OAAO,MAAM;QACX1C,UAAU,CAAC0C,OAAO,GAAG,KAAK;MAC5B,CAAC;IACH,CAAC,EAAE,EAAE,CAAC;IACN,MAAMU,YAAY,GAAGjH,KAAK,CAACkH,OAAO,CAAC,OAAO;MACxC3C,IAAI;MACJE,UAAU;MACVD,OAAO;MACPE,gBAAgB;MAChBC,eAAe;MACfC,WAAW;MACXC,cAAc;MACdX;IACF,CAAC,CAAC,EAAE,CAACA,eAAe,EAAEU,WAAW,EAAED,eAAe,EAAED,gBAAgB,EAAEH,IAAI,EAAEM,cAAc,EAAEL,OAAO,EAAEC,UAAU,CAAC,CAAC;IACjH,OAAO,aAAa3D,KAAK,CAAC2B,kBAAkB,CAAC0E,QAAQ,EAAE;MACrDtE,KAAK,EAAEoE,YAAY;MACnB7D,QAAQ,EAAE,CAAC,aAAaxC,IAAI,CAACT,YAAY,EAAE;QACzCiH,MAAM,EAAE;UACN,CAACxD,mBAAmB,GAAGsB;QACzB;MACF,CAAC,CAAC,EAAE,aAAatE,IAAI,CAACT,YAAY,EAAE;QAClCiH,MAAM,EAAE3B;MACV,CAAC,CAAC,EAAE,aAAa7E,IAAI,CAACT,YAAY,EAAE;QAClCiH,MAAM,EAAE1B;MACV,CAAC,CAAC,EAAE,aAAa9E,IAAI,CAACP,aAAa,EAAE;QACnCa,KAAK,EAAEgB,YAAY,GAAGA,YAAY,CAAChB,KAAK,CAAC,GAAGA,KAAK;QACjDkC,QAAQ,EAAEA;MACZ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAJ,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGC,eAAe,CAACkE,SAAS,GAAG;IAClE;AACJ;AACA;IACIjG,SAAS,EAAEnB,SAAS,CAACqH,MAAM;IAE3B;AACJ;AACA;IACIlE,QAAQ,EAAEnD,SAAS,CAACsH,IAAI;IAExB;AACJ;AACA;IACI7D,eAAe,EAAEzD,SAAS,CAACuH,GAAG;IAE9B;AACJ;AACA;IACI5D,mBAAmB,EAAE3D,SAAS,CAACqH,MAAM;IAErC;AACJ;AACA;IACI9F,qBAAqB,EAAEvB,SAAS,CAACqH,MAAM;IAEvC;AACJ;AACA;IACI1F,kBAAkB,EAAE3B,SAAS,CAACwH,SAAS,CAAC,CAACxH,SAAS,CAACqH,MAAM,EAAErH,SAAS,CAACyH,MAAM,CAAC,CAAC;IAE7E;AACJ;AACA;IACIhG,WAAW,EAAEzB,SAAS,CAACqH,MAAM;IAE7B;AACJ;AACA;IACIxF,yBAAyB,EAAE7B,SAAS,CAAC0H,IAAI;IAEzC;AACJ;AACA;IACInE,YAAY,EAAEvD,SAAS,CAACuH,GAAG;IAE3B;AACJ;AACA;IACIlG,cAAc,EAAErB,SAAS,CAACqH,MAAM;IAEhC;AACJ;AACA;IACItF,uBAAuB,EAAE/B,SAAS,CAAC2H,IAAI;IAEvC;AACJ;AACA;AACA;IACItE,aAAa,EAAErD,SAAS,CAACuH,GAAG;IAE5B;AACJ;AACA;IACItG,KAAK,EAAEjB,SAAS,CAACyH;EACnB,CAAC,GAAG,KAAK,CAAC;EACV,MAAMrD,uBAAuB,GAAG,OAAOxC,uBAAuB,KAAK,QAAQ,GAAGA,uBAAuB,GAAGA,uBAAuB,CAACQ,KAAK;EACrI,MAAMiC,sBAAsB,GAAG,OAAOzC,uBAAuB,KAAK,QAAQ,GAAGA,uBAAuB,GAAGA,uBAAuB,CAACS,IAAI;EAEnI,MAAMuF,wBAAwB,GAAGC,MAAM,IAAIxH,8BAA8B,CAACX,QAAQ,CAAC;IACjFyB,SAAS,EAAEC,gBAAgB;IAC3BG,qBAAqB,EAAEC,4BAA4B;IACnDC,WAAW,EAAEC,gBAAgB;IAC7B0C,uBAAuB;IACvBC,sBAAsB;IACtBhD,cAAc,EAAEC;EAClB,CAAC,EAAEuG,MAAM,CAAC,CAAC;EAEX,OAAO;IACL3E,eAAe;IACfP,cAAc;IACdiF;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}