{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport apiService from \"../../app/apiService\";\nimport { cloudinaryUpload } from \"../../utils/cloudinary\";\nconst initialState = {\n  isLoading: false,\n  error: null,\n  reports: {},\n  products: [],\n  product: {},\n  totalPageProduct: 1,\n  totalProduct: 0,\n  filters: {}\n};\nconst slice = createSlice({\n  name: \"dashboard\",\n  initialState,\n  reducers: {\n    startLoading(state) {\n      state.isLoading = true;\n    },\n    hasError(state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    getReportsDashboardSuccess(state, action) {\n      state.isLoading = false;\n      state.error = null;\n      state.reports = action.payload;\n    },\n    handleChangeDashBoardFilters(state, action) {\n      state.isLoading = false;\n      state.error = null;\n      state.filters = {\n        ...state.filters,\n        ...action.payload\n      };\n    },\n    handleClearDashBoardFilters(state) {\n      state.isLoading = false;\n      state.error = null;\n      state.filters = {};\n    }\n  }\n});\nexport const {\n  handleChangeDashBoardFilters,\n  handleClearDashBoardFilters\n} = slice.actions;\nexport const getReportsDashboard = filters => async dispatch => {\n  dispatch(slice.actions.startLoading());\n  try {\n    const response = await apiService.get(\"/dashboards\", {\n      params: {\n        ...filters\n      }\n    });\n    if (response) {\n      dispatch(slice.actions.getReportsDashboardSuccess(response.data));\n    }\n  } catch (error) {\n    dispatch(slice.actions.hasError(error));\n    toast.error(error.message);\n  }\n};","map":{"version":3,"names":["createSlice","toast","apiService","cloudinaryUpload","initialState","isLoading","error","reports","products","product","totalPageProduct","totalProduct","filters","slice","name","reducers","startLoading","state","hasError","action","payload","getReportsDashboardSuccess","handleChangeDashBoardFilters","handleClearDashBoardFilters","actions","getReportsDashboard","dispatch","response","get","params","data","message"],"sources":["D:/Gitlab/dinhngocliennhi1999_frontend/src/features/dashboard/dashboardSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { toast } from \"react-toastify\";\r\nimport apiService from \"../../app/apiService\";\r\nimport { cloudinaryUpload } from \"../../utils/cloudinary\";\r\n\r\n\r\n\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  error: null,\r\n  reports: {},\r\n  products: [],\r\n  product: {},\r\n  totalPageProduct: 1,\r\n  totalProduct: 0,\r\n  filters: {},\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: \"dashboard\",\r\n  initialState,\r\n  reducers: {\r\n    startLoading(state) {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    hasError(state, action) {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    getReportsDashboardSuccess(state, action) {\r\n      state.isLoading = false;\r\n      state.error = null;\r\n      state.reports = action.payload;\r\n     \r\n    },\r\n     handleChangeDashBoardFilters(state, action) {\r\n      state.isLoading = false;\r\n      state.error = null;\r\n      state.filters = { ...state.filters, ...action.payload };\r\n    },\r\n     handleClearDashBoardFilters(state) {\r\n      state.isLoading = false;\r\n      state.error = null;\r\n      state.filters = {};\r\n    },\r\n\r\n}\r\n\r\n});\r\nexport const {\r\n handleChangeDashBoardFilters,\r\n handleClearDashBoardFilters\r\n} = slice.actions\r\n\r\n\r\nexport const getReportsDashboard = (filters) => async (dispatch) => {\r\n  dispatch(slice.actions.startLoading());\r\n  try {\r\n    const response = await apiService.get(\"/dashboards\", {\r\n      params: { ...filters },\r\n    });\r\n\r\n    if (response) {\r\n      dispatch(slice.actions.getReportsDashboardSuccess(response.data));\r\n    }\r\n  } catch (error) {\r\n    dispatch(slice.actions.hasError(error));\r\n    toast.error(error.message);\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,UAAU,MAAM,sBAAsB;AAC7C,SAASC,gBAAgB,QAAQ,wBAAwB;AAKzD,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,IAAI;EACXC,OAAO,EAAE,CAAC,CAAC;EACXC,QAAQ,EAAE,EAAE;EACZC,OAAO,EAAE,CAAC,CAAC;EACXC,gBAAgB,EAAE,CAAC;EACnBC,YAAY,EAAE,CAAC;EACfC,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,MAAMC,KAAK,GAAGb,WAAW,CAAC;EACxBc,IAAI,EAAE,WAAW;EACjBV,YAAY;EACZW,QAAQ,EAAE;IACRC,YAAY,CAACC,KAAK,EAAE;MAClBA,KAAK,CAACZ,SAAS,GAAG,IAAI;IACxB,CAAC;IAEDa,QAAQ,CAACD,KAAK,EAAEE,MAAM,EAAE;MACtBF,KAAK,CAACZ,SAAS,GAAG,KAAK;MACvBY,KAAK,CAACX,KAAK,GAAGa,MAAM,CAACC,OAAO;IAC9B,CAAC;IACDC,0BAA0B,CAACJ,KAAK,EAAEE,MAAM,EAAE;MACxCF,KAAK,CAACZ,SAAS,GAAG,KAAK;MACvBY,KAAK,CAACX,KAAK,GAAG,IAAI;MAClBW,KAAK,CAACV,OAAO,GAAGY,MAAM,CAACC,OAAO;IAEhC,CAAC;IACAE,4BAA4B,CAACL,KAAK,EAAEE,MAAM,EAAE;MAC3CF,KAAK,CAACZ,SAAS,GAAG,KAAK;MACvBY,KAAK,CAACX,KAAK,GAAG,IAAI;MAClBW,KAAK,CAACL,OAAO,GAAG;QAAE,GAAGK,KAAK,CAACL,OAAO;QAAE,GAAGO,MAAM,CAACC;MAAQ,CAAC;IACzD,CAAC;IACAG,2BAA2B,CAACN,KAAK,EAAE;MAClCA,KAAK,CAACZ,SAAS,GAAG,KAAK;MACvBY,KAAK,CAACX,KAAK,GAAG,IAAI;MAClBW,KAAK,CAACL,OAAO,GAAG,CAAC,CAAC;IACpB;EAEJ;AAEA,CAAC,CAAC;AACF,OAAO,MAAM;EACZU,4BAA4B;EAC5BC;AACD,CAAC,GAAGV,KAAK,CAACW,OAAO;AAGjB,OAAO,MAAMC,mBAAmB,GAAIb,OAAO,IAAK,MAAOc,QAAQ,IAAK;EAClEA,QAAQ,CAACb,KAAK,CAACW,OAAO,CAACR,YAAY,EAAE,CAAC;EACtC,IAAI;IACF,MAAMW,QAAQ,GAAG,MAAMzB,UAAU,CAAC0B,GAAG,CAAC,aAAa,EAAE;MACnDC,MAAM,EAAE;QAAE,GAAGjB;MAAQ;IACvB,CAAC,CAAC;IAEF,IAAIe,QAAQ,EAAE;MACZD,QAAQ,CAACb,KAAK,CAACW,OAAO,CAACH,0BAA0B,CAACM,QAAQ,CAACG,IAAI,CAAC,CAAC;IACnE;EACF,CAAC,CAAC,OAAOxB,KAAK,EAAE;IACdoB,QAAQ,CAACb,KAAK,CAACW,OAAO,CAACN,QAAQ,CAACZ,KAAK,CAAC,CAAC;IACvCL,KAAK,CAACK,KAAK,CAACA,KAAK,CAACyB,OAAO,CAAC;EAC5B;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}