{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport { ok as assert } from 'uvu/assert';\nimport { asciiPunctuation } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/** @type {Tokenizer} */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.backslash, 'expected `\\\\`');\n    effects.enter(types.characterEscape);\n    effects.enter(types.escapeMarker);\n    effects.consume(code);\n    effects.exit(types.escapeMarker);\n    return open;\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter(types.characterEscapeValue);\n      effects.consume(code);\n      effects.exit(types.characterEscapeValue);\n      effects.exit(types.characterEscape);\n      return ok;\n    }\n    return nok(code);\n  }\n}","map":{"version":3,"names":["ok","assert","asciiPunctuation","codes","types","characterEscape","name","tokenize","tokenizeCharacterEscape","effects","nok","start","code","backslash","enter","escapeMarker","consume","exit","open","characterEscapeValue"],"sources":["D:/Gitlab/dinhngocliennhi1999_frontend/node_modules/micromark-core-commonmark/dev/lib/character-escape.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {asciiPunctuation} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.backslash, 'expected `\\\\`')\n    effects.enter(types.characterEscape)\n    effects.enter(types.escapeMarker)\n    effects.consume(code)\n    effects.exit(types.escapeMarker)\n    return open\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter(types.characterEscapeValue)\n      effects.consume(code)\n      effects.exit(types.characterEscapeValue)\n      effects.exit(types.characterEscape)\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,EAAE,IAAIC,MAAM,QAAO,YAAY;AACvC,SAAQC,gBAAgB,QAAO,0BAA0B;AACzD,SAAQC,KAAK,QAAO,gCAAgC;AACpD,SAAQC,KAAK,QAAO,gCAAgC;;AAEpD;AACA,OAAO,MAAMC,eAAe,GAAG;EAC7BC,IAAI,EAAE,iBAAiB;EACvBC,QAAQ,EAAEC;AACZ,CAAC;;AAED;AACA,SAASA,uBAAuB,CAACC,OAAO,EAAET,EAAE,EAAEU,GAAG,EAAE;EACjD,OAAOC,KAAK;;EAEZ;EACA,SAASA,KAAK,CAACC,IAAI,EAAE;IACnBX,MAAM,CAACW,IAAI,KAAKT,KAAK,CAACU,SAAS,EAAE,eAAe,CAAC;IACjDJ,OAAO,CAACK,KAAK,CAACV,KAAK,CAACC,eAAe,CAAC;IACpCI,OAAO,CAACK,KAAK,CAACV,KAAK,CAACW,YAAY,CAAC;IACjCN,OAAO,CAACO,OAAO,CAACJ,IAAI,CAAC;IACrBH,OAAO,CAACQ,IAAI,CAACb,KAAK,CAACW,YAAY,CAAC;IAChC,OAAOG,IAAI;EACb;;EAEA;EACA,SAASA,IAAI,CAACN,IAAI,EAAE;IAClB,IAAIV,gBAAgB,CAACU,IAAI,CAAC,EAAE;MAC1BH,OAAO,CAACK,KAAK,CAACV,KAAK,CAACe,oBAAoB,CAAC;MACzCV,OAAO,CAACO,OAAO,CAACJ,IAAI,CAAC;MACrBH,OAAO,CAACQ,IAAI,CAACb,KAAK,CAACe,oBAAoB,CAAC;MACxCV,OAAO,CAACQ,IAAI,CAACb,KAAK,CAACC,eAAe,CAAC;MACnC,OAAOL,EAAE;IACX;IAEA,OAAOU,GAAG,CAACE,IAAI,CAAC;EAClB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}