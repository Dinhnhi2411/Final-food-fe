{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = responsiveFontSizes;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _utils = require(\"@material-ui/utils\");\nvar _cssUtils = require(\"./cssUtils\");\nfunction responsiveFontSizes(themeInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$breakpoints = options.breakpoints,\n    breakpoints = _options$breakpoints === void 0 ? ['sm', 'md', 'lg'] : _options$breakpoints,\n    _options$disableAlign = options.disableAlign,\n    disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign,\n    _options$factor = options.factor,\n    factor = _options$factor === void 0 ? 2 : _options$factor,\n    _options$variants = options.variants,\n    variants = _options$variants === void 0 ? ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline'] : _options$variants;\n  var theme = (0, _extends2.default)({}, themeInput);\n  theme.typography = (0, _extends2.default)({}, theme.typography);\n  var typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  var convert = (0, _cssUtils.convertLength)(typography.htmlFontSize);\n  var breakpointValues = breakpoints.map(function (x) {\n    return theme.breakpoints.values[x];\n  });\n  variants.forEach(function (variant) {\n    var style = typography[variant];\n    var remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n    if (remFontSize <= 1) {\n      return;\n    }\n    var maxFontSize = remFontSize;\n    var minFontSize = 1 + (maxFontSize - 1) / factor;\n    var lineHeight = style.lineHeight;\n    if (!(0, _cssUtils.isUnitless)(lineHeight) && !disableAlign) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: Unsupported non-unitless line height with grid alignment.\\nUse unitless line heights instead.\" : (0, _utils.formatMuiErrorMessage)(6));\n    }\n    if (!(0, _cssUtils.isUnitless)(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n    var transform = null;\n    if (!disableAlign) {\n      transform = function transform(value) {\n        return (0, _cssUtils.alignProperty)({\n          size: value,\n          grid: (0, _cssUtils.fontGrid)({\n            pixels: 4,\n            lineHeight: lineHeight,\n            htmlFontSize: typography.htmlFontSize\n          })\n        });\n      };\n    }\n    typography[variant] = (0, _extends2.default)({}, style, (0, _cssUtils.responsiveProperty)({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform: transform\n    }));\n  });\n  return theme;\n}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","responsiveFontSizes","_extends2","_utils","_cssUtils","themeInput","options","arguments","length","undefined","_options$breakpoints","breakpoints","_options$disableAlign","disableAlign","_options$factor","factor","_options$variants","variants","theme","typography","convert","convertLength","htmlFontSize","breakpointValues","map","x","values","forEach","variant","style","remFontSize","parseFloat","fontSize","maxFontSize","minFontSize","lineHeight","isUnitless","Error","process","env","NODE_ENV","formatMuiErrorMessage","transform","alignProperty","size","grid","fontGrid","pixels","responsiveProperty","cssProperty","min","max","unit"],"sources":["D:/Gitlab/dinhngocliennhi1999_frontend/node_modules/@material-ui/core/styles/responsiveFontSizes.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = responsiveFontSizes;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _utils = require(\"@material-ui/utils\");\n\nvar _cssUtils = require(\"./cssUtils\");\n\nfunction responsiveFontSizes(themeInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$breakpoints = options.breakpoints,\n      breakpoints = _options$breakpoints === void 0 ? ['sm', 'md', 'lg'] : _options$breakpoints,\n      _options$disableAlign = options.disableAlign,\n      disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign,\n      _options$factor = options.factor,\n      factor = _options$factor === void 0 ? 2 : _options$factor,\n      _options$variants = options.variants,\n      variants = _options$variants === void 0 ? ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline'] : _options$variants;\n  var theme = (0, _extends2.default)({}, themeInput);\n  theme.typography = (0, _extends2.default)({}, theme.typography);\n  var typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  var convert = (0, _cssUtils.convertLength)(typography.htmlFontSize);\n  var breakpointValues = breakpoints.map(function (x) {\n    return theme.breakpoints.values[x];\n  });\n  variants.forEach(function (variant) {\n    var style = typography[variant];\n    var remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    var maxFontSize = remFontSize;\n    var minFontSize = 1 + (maxFontSize - 1) / factor;\n    var lineHeight = style.lineHeight;\n\n    if (!(0, _cssUtils.isUnitless)(lineHeight) && !disableAlign) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: Unsupported non-unitless line height with grid alignment.\\nUse unitless line heights instead.\" : (0, _utils.formatMuiErrorMessage)(6));\n    }\n\n    if (!(0, _cssUtils.isUnitless)(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    var transform = null;\n\n    if (!disableAlign) {\n      transform = function transform(value) {\n        return (0, _cssUtils.alignProperty)({\n          size: value,\n          grid: (0, _cssUtils.fontGrid)({\n            pixels: 4,\n            lineHeight: lineHeight,\n            htmlFontSize: typography.htmlFontSize\n          })\n        });\n      };\n    }\n\n    typography[variant] = (0, _extends2.default)({}, style, (0, _cssUtils.responsiveProperty)({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform: transform\n    }));\n  });\n  return theme;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}